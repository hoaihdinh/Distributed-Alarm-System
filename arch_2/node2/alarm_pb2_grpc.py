# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import alarm_pb2 as alarm__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in alarm_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class StorageStub(object):
    """Storage service/node
    interacts with memory where alarms are stored
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddAlarm = channel.unary_unary(
                '/alarm.Storage/AddAlarm',
                request_serializer=alarm__pb2.Alarm.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetAlarm = channel.unary_unary(
                '/alarm.Storage/GetAlarm',
                request_serializer=alarm__pb2.AlarmId.SerializeToString,
                response_deserializer=alarm__pb2.Alarm.FromString,
                _registered_method=True)
        self.ListAlarms = channel.unary_stream(
                '/alarm.Storage/ListAlarms',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=alarm__pb2.Alarm.FromString,
                _registered_method=True)
        self.DeleteAlarm = channel.unary_unary(
                '/alarm.Storage/DeleteAlarm',
                request_serializer=alarm__pb2.AlarmId.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class StorageServicer(object):
    """Storage service/node
    interacts with memory where alarms are stored
    """

    def AddAlarm(self, request, context):
        """saves alarm to storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAlarm(self, request, context):
        """returns alarm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAlarms(self, request, context):
        """lists all alarms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAlarm(self, request, context):
        """deletes alarm with id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddAlarm': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAlarm,
                    request_deserializer=alarm__pb2.Alarm.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetAlarm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlarm,
                    request_deserializer=alarm__pb2.AlarmId.FromString,
                    response_serializer=alarm__pb2.Alarm.SerializeToString,
            ),
            'ListAlarms': grpc.unary_stream_rpc_method_handler(
                    servicer.ListAlarms,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=alarm__pb2.Alarm.SerializeToString,
            ),
            'DeleteAlarm': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAlarm,
                    request_deserializer=alarm__pb2.AlarmId.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alarm.Storage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alarm.Storage', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Storage(object):
    """Storage service/node
    interacts with memory where alarms are stored
    """

    @staticmethod
    def AddAlarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alarm.Storage/AddAlarm',
            alarm__pb2.Alarm.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAlarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alarm.Storage/GetAlarm',
            alarm__pb2.AlarmId.SerializeToString,
            alarm__pb2.Alarm.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAlarms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/alarm.Storage/ListAlarms',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            alarm__pb2.Alarm.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAlarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alarm.Storage/DeleteAlarm',
            alarm__pb2.AlarmId.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SchedulerStub(object):
    """Scheduler service/node
    handles alarm triggers and requests
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScheduleAlarm = channel.unary_unary(
                '/alarm.Scheduler/ScheduleAlarm',
                request_serializer=alarm__pb2.Alarm.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.FwdDueAlarm = channel.unary_unary(
                '/alarm.Scheduler/FwdDueAlarm',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=alarm__pb2.Alarm.FromString,
                _registered_method=True)


class SchedulerServicer(object):
    """Scheduler service/node
    handles alarm triggers and requests
    """

    def ScheduleAlarm(self, request, context):
        """calls Storage node to SaveAlarm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FwdDueAlarm(self, request, context):
        """sends triggered Alarm to Notification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ScheduleAlarm': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleAlarm,
                    request_deserializer=alarm__pb2.Alarm.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'FwdDueAlarm': grpc.unary_unary_rpc_method_handler(
                    servicer.FwdDueAlarm,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=alarm__pb2.Alarm.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alarm.Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alarm.Scheduler', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """Scheduler service/node
    handles alarm triggers and requests
    """

    @staticmethod
    def ScheduleAlarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alarm.Scheduler/ScheduleAlarm',
            alarm__pb2.Alarm.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FwdDueAlarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alarm.Scheduler/FwdDueAlarm',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            alarm__pb2.Alarm.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NotificationStub(object):
    """Notification service/node
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendNotification = channel.unary_unary(
                '/alarm.Notification/SendNotification',
                request_serializer=alarm__pb2.Alarm.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class NotificationServicer(object):
    """Notification service/node
    """

    def SendNotification(self, request, context):
        """prints notif to terminal
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.SendNotification,
                    request_deserializer=alarm__pb2.Alarm.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alarm.Notification', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alarm.Notification', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Notification(object):
    """Notification service/node
    """

    @staticmethod
    def SendNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alarm.Notification/SendNotification',
            alarm__pb2.Alarm.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AccountStub(object):
    """Account Management service/node
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddUser = channel.unary_unary(
                '/alarm.Account/AddUser',
                request_serializer=alarm__pb2.User.SerializeToString,
                response_deserializer=alarm__pb2.Status.FromString,
                _registered_method=True)
        self.VerifyUser = channel.unary_unary(
                '/alarm.Account/VerifyUser',
                request_serializer=alarm__pb2.User.SerializeToString,
                response_deserializer=alarm__pb2.Status.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/alarm.Account/GetUser',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=alarm__pb2.Username.FromString,
                _registered_method=True)


class AccountServicer(object):
    """Account Management service/node
    """

    def AddUser(self, request, context):
        """adds a user to saved_users file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyUser(self, request, context):
        """checks saved_users file for user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """returns current user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=alarm__pb2.User.FromString,
                    response_serializer=alarm__pb2.Status.SerializeToString,
            ),
            'VerifyUser': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyUser,
                    request_deserializer=alarm__pb2.User.FromString,
                    response_serializer=alarm__pb2.Status.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=alarm__pb2.Username.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alarm.Account', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alarm.Account', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Account(object):
    """Account Management service/node
    """

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alarm.Account/AddUser',
            alarm__pb2.User.SerializeToString,
            alarm__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alarm.Account/VerifyUser',
            alarm__pb2.User.SerializeToString,
            alarm__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alarm.Account/GetUser',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            alarm__pb2.Username.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
